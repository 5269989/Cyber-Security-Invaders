import RPi.GPIO as GPIO

# Assuming you have set up PWM for each segment
pwm_dict = {SEGMENT_A: GPIO.PWM(SEGMENT_A, 100), SEGMENT_B: GPIO.PWM(SEGMENT_B, 100), ...}
for pwm in pwm_dict.values():
    pwm.start(0)  # Start PWM with 0% duty cycle

def display_number_on_7seg(number):
    digits = str(number).zfill(4)
    for i, digit in enumerate(digits):
        digit_pins = [D1, D2, D3, D4]
        GPIO.output(digit_pins[i], GPIO.HIGH)  # Activate current digit
        
        segments = digit_to_segments[digit]
        for j, segment in enumerate([SEGMENT_A, SEGMENT_B, SEGMENT_C, SEGMENT_D, SEGMENT_E, SEGMENT_F, SEGMENT_G]):
            # Adjust duty cycle for brightness, e.g., 50% brightness:
            pwm_dict[segment].ChangeDutyCycle(50 if segments[j] == 0 else 0)  # 0 for off, 50 for on but dimmer

        # Brief delay to ensure visibility without much flicker
        time.sleep(0.002)  # Very short delay, adjust as needed
        
        # Turn off all segments for this digit
        for pwm in pwm_dict.values():
            pwm.ChangeDutyCycle(0)
        
        # Turn off other digits
        for j in range(4):
            if j != i:
                GPIO.output(digit_pins[j], GPIO.LOW)

# After this function:
for pwm in pwm_dict.values():
    pwm.stop()  # Stop PWM when done
